/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Interest } from "./Interest";
import { InterestCountArgs } from "./InterestCountArgs";
import { InterestFindManyArgs } from "./InterestFindManyArgs";
import { InterestFindUniqueArgs } from "./InterestFindUniqueArgs";
import { CreateInterestArgs } from "./CreateInterestArgs";
import { UpdateInterestArgs } from "./UpdateInterestArgs";
import { DeleteInterestArgs } from "./DeleteInterestArgs";
import { Wallet } from "../../wallet/base/Wallet";
import { InterestService } from "../interest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Interest)
export class InterestResolverBase {
  constructor(
    protected readonly service: InterestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "read",
    possession: "any",
  })
  async _interestsMeta(
    @graphql.Args() args: InterestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Interest])
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "read",
    possession: "any",
  })
  async interests(
    @graphql.Args() args: InterestFindManyArgs
  ): Promise<Interest[]> {
    return this.service.interests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Interest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "read",
    possession: "own",
  })
  async interest(
    @graphql.Args() args: InterestFindUniqueArgs
  ): Promise<Interest | null> {
    const result = await this.service.interest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Interest)
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "create",
    possession: "any",
  })
  async createInterest(
    @graphql.Args() args: CreateInterestArgs
  ): Promise<Interest> {
    return await this.service.createInterest({
      ...args,
      data: {
        ...args.data,

        wallet: args.data.wallet
          ? {
              connect: args.data.wallet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Interest)
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "update",
    possession: "any",
  })
  async updateInterest(
    @graphql.Args() args: UpdateInterestArgs
  ): Promise<Interest | null> {
    try {
      return await this.service.updateInterest({
        ...args,
        data: {
          ...args.data,

          wallet: args.data.wallet
            ? {
                connect: args.data.wallet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Interest)
  @nestAccessControl.UseRoles({
    resource: "Interest",
    action: "delete",
    possession: "any",
  })
  async deleteInterest(
    @graphql.Args() args: DeleteInterestArgs
  ): Promise<Interest | null> {
    try {
      return await this.service.deleteInterest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "wallet",
  })
  @nestAccessControl.UseRoles({
    resource: "Wallet",
    action: "read",
    possession: "any",
  })
  async getWallet(@graphql.Parent() parent: Interest): Promise<Wallet | null> {
    const result = await this.service.getWallet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
