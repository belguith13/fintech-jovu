/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LockedFunds as PrismaLockedFunds,
  Wallet as PrismaWallet,
} from "@prisma/client";

export class LockedFundsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LockedFundsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.lockedFunds.count(args);
  }

  async lockedFundsItems(
    args: Prisma.LockedFundsFindManyArgs
  ): Promise<PrismaLockedFunds[]> {
    return this.prisma.lockedFunds.findMany(args);
  }
  async lockedFunds(
    args: Prisma.LockedFundsFindUniqueArgs
  ): Promise<PrismaLockedFunds | null> {
    return this.prisma.lockedFunds.findUnique(args);
  }
  async createLockedFunds(
    args: Prisma.LockedFundsCreateArgs
  ): Promise<PrismaLockedFunds> {
    return this.prisma.lockedFunds.create(args);
  }
  async updateLockedFunds(
    args: Prisma.LockedFundsUpdateArgs
  ): Promise<PrismaLockedFunds> {
    return this.prisma.lockedFunds.update(args);
  }
  async deleteLockedFunds(
    args: Prisma.LockedFundsDeleteArgs
  ): Promise<PrismaLockedFunds> {
    return this.prisma.lockedFunds.delete(args);
  }

  async getWallet(parentId: string): Promise<PrismaWallet | null> {
    return this.prisma.lockedFunds
      .findUnique({
        where: { id: parentId },
      })
      .wallet();
  }
}
