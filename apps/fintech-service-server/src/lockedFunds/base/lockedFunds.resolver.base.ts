/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LockedFunds } from "./LockedFunds";
import { LockedFundsCountArgs } from "./LockedFundsCountArgs";
import { LockedFundsFindManyArgs } from "./LockedFundsFindManyArgs";
import { LockedFundsFindUniqueArgs } from "./LockedFundsFindUniqueArgs";
import { CreateLockedFundsArgs } from "./CreateLockedFundsArgs";
import { UpdateLockedFundsArgs } from "./UpdateLockedFundsArgs";
import { DeleteLockedFundsArgs } from "./DeleteLockedFundsArgs";
import { Wallet } from "../../wallet/base/Wallet";
import { LockedFundsService } from "../lockedFunds.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LockedFunds)
export class LockedFundsResolverBase {
  constructor(
    protected readonly service: LockedFundsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LockedFunds",
    action: "read",
    possession: "any",
  })
  async _lockedFundsItemsMeta(
    @graphql.Args() args: LockedFundsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LockedFunds])
  @nestAccessControl.UseRoles({
    resource: "LockedFunds",
    action: "read",
    possession: "any",
  })
  async lockedFundsItems(
    @graphql.Args() args: LockedFundsFindManyArgs
  ): Promise<LockedFunds[]> {
    return this.service.lockedFundsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LockedFunds, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LockedFunds",
    action: "read",
    possession: "own",
  })
  async lockedFunds(
    @graphql.Args() args: LockedFundsFindUniqueArgs
  ): Promise<LockedFunds | null> {
    const result = await this.service.lockedFunds(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LockedFunds)
  @nestAccessControl.UseRoles({
    resource: "LockedFunds",
    action: "create",
    possession: "any",
  })
  async createLockedFunds(
    @graphql.Args() args: CreateLockedFundsArgs
  ): Promise<LockedFunds> {
    return await this.service.createLockedFunds({
      ...args,
      data: {
        ...args.data,

        wallet: args.data.wallet
          ? {
              connect: args.data.wallet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LockedFunds)
  @nestAccessControl.UseRoles({
    resource: "LockedFunds",
    action: "update",
    possession: "any",
  })
  async updateLockedFunds(
    @graphql.Args() args: UpdateLockedFundsArgs
  ): Promise<LockedFunds | null> {
    try {
      return await this.service.updateLockedFunds({
        ...args,
        data: {
          ...args.data,

          wallet: args.data.wallet
            ? {
                connect: args.data.wallet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LockedFunds)
  @nestAccessControl.UseRoles({
    resource: "LockedFunds",
    action: "delete",
    possession: "any",
  })
  async deleteLockedFunds(
    @graphql.Args() args: DeleteLockedFundsArgs
  ): Promise<LockedFunds | null> {
    try {
      return await this.service.deleteLockedFunds(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "wallet",
  })
  @nestAccessControl.UseRoles({
    resource: "Wallet",
    action: "read",
    possession: "any",
  })
  async getWallet(
    @graphql.Parent() parent: LockedFunds
  ): Promise<Wallet | null> {
    const result = await this.service.getWallet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
